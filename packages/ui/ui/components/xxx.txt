import {html, css, type PropertyValues, type CSSResult} from 'lit';
import {property} from 'lit/decorators.js';
import {classMap} from 'lit/directives/class-map.js';

import {TiniElement, ElementParts, partAttrMap, createStyleBuilder, Colors, Scales} from '@tinijs/core';

export enum XXXParts {
  Root = ElementParts.Root,
}

type ComponentConstructor = typeof import('./xxx.js').default;
type Component = import('./xxx.js').default;

export default class extends TiniElement {

  /* eslint-disable prettier/prettier */
  @property({type: String, reflect: true}) prop?: string;
  /* eslint-enable prettier/prettier */

  willUpdate(changedProperties: PropertyValues<this>) {
    super.willUpdate(changedProperties);
    // root classes parts
    this.extendRootClasses({});
  }

  protected render() {
    return this.renderPart(
      XXXParts.Root,
      rootChild => html`
        <xxx
          class=${classMap(this.rootClasses)}
          part=${partAttrMap(this.rootClasses)}
        >
          ${rootChild()}
        </xxx>
      `
    );
  }
}

export const defaultStyles = createStyleBuilder<{
  statics: CSSResult;
}>(outputs => [
  css`
    :host {

    }

    .root {

    }
  `,

  outputs.statics,
]);